#!/usr/bin/env python3
import os, getopt, sys, hashlib

# check if run as root
if os.geteuid() != 0:
    exit("Identypi settings can only be accessed as root!")

# set variables
id = ""
name = ""
write = False



# get command
selec = ""
try:
    opts, args = getopt.getopt(sys.argv[1:], "h o L c I l e i E D r", ["help", "conf", "log", "create", "createid", "list", "export", "import", "enable", "disable", "remove"])
except getopt.GetoptError:
    print("Command unknown, type -h for help")
    sys.exit()

for opt, args in opts:
    if opt in ("-h", "--help"): selec = "h"
    elif opt in ("-o", "--conf"): selec = "o"
    elif opt in ("-L", "--log"): selec = "L"
    elif opt in ("-c", "--create"): selec = "c"
    elif opt in ("-I", "--createid"): selec = "I"
    elif opt in ("-l", "--list"): selec = "l"
    elif opt in ("-e", "--export"): selec = "e"
    elif opt in ("-i", "--import"): selec = "i"
    elif opt in ("-E", "--enable"): selec = "E"
    elif opt in ("-D", "--disable"): selec = "D"
    elif opt in ("-r", "--remove"): selec = "r"
    else: selec = ""



# help
if selec == "" or selec == "h":
    print("-h or --help: list this help\n"
          "-o or --conf: access config, the log is stored at /var/log/identypi.log (standard 10000)\n"
          "-L or --log: print log\n"
          "-c or --create: to create a user with name and holding card in front of the reader\n"
          "-I or --createid: create users with name and ID\n"
          "-l or --list: list all hashes with their users\n"
          "-e or --export: export all users to a file in current directory\n"
          "-i or --import: import users from a file in current directory\n"
          "-E or --enable: enable and start the identypi service\n"
          "-D or --disable: stop and disable the identypi service\n"
          "-r or --remove: remove user with name")

# conf
elif selec == "o":
    os.system("nano /etc/identypi.conf")
    os.system("systemctl restart identypi.service")

# log
elif selec == "L":
    os.system("cat /var/log/identypi.log")
    print("")

# create
elif selec == "c":
    print("Hold your Card in front of the reader\nplease run identypi -E if terminated...")
    os.system("systemctl stop identypi.service")
    id = os.popen("bash -c 'timeout 5m /usr/share/identypi/get-id.py |& tail -1'").read()
    if len(id) == 13:
        id = hashlib.new("sha256", str(id).encode()).hexdigest()
        users = open("/usr/share/identypi/users", "r")
        for line in users:
            if len(line) < 60:
                print("There are errors in the user file at /usr/share/identypi/users")
                exit()
            if str(line.split()[0]) == str(id):
                print("Card already authorized")
                exit()
        users.close()
        name = input("Enter a name without spaces: ")
        while (' ' in name) == True: name = input("Enter a name WITHOUT spaces: ")
        print("Writing to users-file...")
        users = open("/usr/share/identypi/users", "a")
        users.write(str(id + " " + name + "\n"))
        id = 0
        users.close()
        os.system("systemctl start identypi.service")
        print("done")
    else:
        print("Something went wrong while getting the card ID")
        exit()

# createid
elif selec == "I":
    print("Hold your Card in front of the reader\nplease run identypi -E if terminated... ")
    id = input("Please Enter ID (8 characters):")
    if len(id) == 8:
        id = hashlib.new("sha256", str(id).encode()).hexdigest()
        users = open("/usr/share/identypi/users", "r")
        for line in users:
            if len(line) < 60:
                print("There are errors in the user file at /usr/share/identypi/users")
                exit()
            if str(line.split()[0]) == str(id):
                print("Card already authorized")
                exit()
        users.close()
        name = input("Enter a name without spaces: ")
        while (' ' in name) == True: name = input("Enter a name WITHOUT spaces: ")
        print("Writing to users-file...")
        users = open("/usr/share/identypi/users", "a")
        users.write(str(id + " " + name + "\n"))
        id = 0
        users.close()
        os.system("systemctl restart identypi.service")
        print("done")
    else:
        print("Something is wrong with the card ID")
        exit()

# list
elif selec == "l":
    os.system("cat /usr/share/identypi/users")

# export
elif selec == "e":
    os.system(str("cp /usr/share/identypi/users " + os.getcwd() + "/" + input("Enter a Filename from the current directory: ")))
    print("done")

# import
elif selec == "i":
    newusers = open(str(os.getcwd() + "/" + input("Enter a Filename from the current directory: ")), "r")
    for hashuser in newusers:
        write = True
        if len(hashuser) < 60:
            print("A userhash is to short")
            exit()
        id = str(hashuser.split()[0])
        users = open("/usr/share/identypi/users", "r")
        for line in users:
            if len(line) < 60:
                print("There are errors in the user file at /usr/share/identypi/users")
                exit()
            if str(line.split()[0]) == id:
                print("Card already authorized")
                write = False
                break
        users.close()
        if write == True:
            print("Writing to users-file...")
            users = open("/usr/share/identypi/users", "a")
            users.write(str(hashuser))
            users.close()
    newusers.close()
    os.system("systemctl restart identypi.service")
    print("done")

# enable
elif selec == "E":
    os.system("systemctl enable identypi")
    os.system("systemctl start identypi")
    print("enabled")

# disable
elif selec == "D":
    os.system("systemctl stop identypi")
    os.system("systemctl disable identypi")
    print("disabled")

#remove
elif selec == "r":
    name = input("Enter a name without spaces: ")
    users = open("/usr/share/identypi/users", "r")
    usersbak = open("/usr/share/identypi/users.bak", "a")
    while (' ' in name) == True: name = input("Enter a name WITHOUT spaces: ")
    for line in users:
        if str(line.split()[1]) == str(name):
            continue
        else:
            usersbak.write(line)
    os.system("rm /usr/share/identypi/users")
    os.system("mv /usr/share/identypi/users.bak /usr/share/identypi/users")
    print("done")
    os.system("systemctl restart identypi.service")
